"""
Copyright 2017 Arm Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
"""

ARM_INTRINSICS = [r'v\w+_[bfsu](?:8|16|32|64)',  # Neon
                  r'sv\w+_[bfsu](?:8|16|32|64)', # SVE
                  r'svu?int(?:32|64)_t',         # SVE type
                  r'svfloat(?:32|64)_t',         # SVE type
                  r'svbool_t',                   # SVE type
                  r'_arm_\w+',
                  r'__cps',
                  r'__dmb',
                  r'__dsb',
                  r'__isb',
                  r'__hvc',
                  r'__ldrexd',
                  r'__prefetch',
                  r'__rdpmccntr64',
                  r'__sev',
                  r'__swi',
                  r'__trap',
                  r'__wfe',
                  r'__wfi',
                  r'_AddSatInt',
                  r'_CopyDoubleFromInt64',
                  r'_CopyFloatFromInt32',
                  r'_CopyInt32FromFloat',
                  r'_CopyInt64FromDouble',
                  r'_CountLeadingOnes',
                  r'_CountLeadingOnes64',
                  r'_CountLeadingSigns',
                  r'_CountLeadingSigns64',
                  r'_CountLeadingZeros',
                  r'_CountLeadingZeros64',
                  r'_CountOneBits',
                  r'_CountOneBits64',
                  r'_isunordered',
                  r'_isunorderedf',
                  r'_DAddSatInt',
                  r'_DSubSatInt',
                  r'_MoveFromCoprocessor',
                  r'_MoveFromCoprocessor2',
                  r'_MoveFromCoprocessor64',
                  r'_MoveToCoprocessor',
                  r'_MoveToCoprocessor2',
                  r'_MoveToCoprocessor64',
                  r'_MulHigh',
                  r'_MulUnsignedHigh',
                  r'_ReadBankedReg',
                  r'_ReadStatusReg',
                  r'_SubSatInt',
                  r'_WriteBankedReg',
                  r'_WriteStatusReg',
                  r'_ARM_BARRIER_SY',
                  r'_ARM_BARRIER_ST',
                  r'_ARM_BARRIER_ISH',
                  r'_ARM_BARRIER_ISHST',
                  r'_ARM_BARRIER_NSH',
                  r'_ARM_BARRIER_NSHST',
                  r'_ARM_BARRIER_OSH',
                  r'_ARM_BARRIER_OSHST',
                  r'_BitScanForward',
                  r'_BitScanReverse',
                  r'_bittest',
                  r'_bittestandcomplement',
                  r'_bittestandreset',
                  r'_bittestandset',
                  r'_byteswap_uint64',
                  r'_byteswap_ulong',
                  r'_byteswap_ushort',
                  r'_disable',
                  r'_enable',
                  r'_lrotl',
                  r'_lrotr',
                  r'_ReadBarrier',
                  r'_ReadWriteBarrier',
                  r'_ReturnAddress',
                  r'_rotl',
                  r'_rotl16',
                  r'_rotl64',
                  r'_rotl8',
                  r'_rotr',
                  r'_rotr16',
                  r'_rotr64',
                  r'_rotr8',
                  r'_WriteBarrier',
                  r'_Interlocked\w+',
                  r'_interlockedbittestand\w+']
"""List of Arm intrinsics."""

OTHER_ARCH_INTRINSICS = [r'_addcary\w+',
                         r'__addgs\w+',
                         r'_allow_cpu_features',
                         r'_andn_\w+',
                         r'_addcarry\w+',
                         r'_bext\w+',
                         r'_bit_scan_\w+',
                         r'_BitScan\w+',
                         r'_bittest\w+',
                         r'_blc\w+',
                         r'_bls\w+',
                         r'_bnd_\w+',
                         r'_bswap\w+',
                         r'_bzhi\w+',
                         r'_cast[uf]\w+',
                         r'_clac',
                         r'__cpuid(?:ex)?',
                         r'_cvt\w+',
                         r'_disable',
                         r'__emulu?',
                         r'_enable',
                         r'_fxrstor\w+',
                         r'_fxsave\w+',
                         r'__halt',
                         r'__inbyte',
                         r'__inbytestring',
                         r'__incfsbyte',
                         r'__incfsdword',
                         r'__indword',
                         r'__indwordstring',
                         r'__int2c',
                         r'_Interlocked\w+',
                         r'_interlockedbittestand\w+',
                         r'_invpcid',
                         r'_lgdt',
                         r'__lidt',
                         r'__ll_[lr]shift',
                         r'__llwpcb',
                         r'_load_be_\w+',
                         r'_loadbe_\w+',
                         r'_lrot\w+',
                         r'__lwpins32',
                         r'__lwpval32',
                         r'__?lzcnt\w+',
                         r'_m_\w+',
                         r'_mm(?:[0-9]+)?_\w+',
                         r'__movs[bdw]',
                         r'_mulx_u32',
                         r'__nvreg_\w+',
                         r'__outbyte',
                         r'__outbytestring',
                         r'__outdword',
                         r'__outdwordstring',
                         r'__outword',
                         r'__outwordstring',
                         r'_pdep_\w+',
                         r'_pext_\w+',
                         r'__?popcnt\w+',
                         r'_rdpip_\w+',
                         r'_rdpmc',
                         r'_rdrand\w+',
                         r'__?rdtsc',
                         r'__rdtscp',
                         r'_ReadBarrier',
                         r'__readcr[0-9]',
                         r'__readdr',
                         r'__readeflags',
                         r'__?readfs\w+',
                         r'__?readgs\w+',
                         r'__readmsr',
                         r'__readpmc',
                         r'_ReadWriteBarrier',
                         r'_rorx\w*'
                         r'_rotl\w*',
                         r'_rotr\w*',
                         r'_rotw\w',
                         r'_rsm',
                         r'_sarx_\w+',
                         r'_sgdt',
                         r'_sh[lr]x_\w+'
                         r'__sidt',
                         r'__slwpcb',
                         r'_stac',
                         r'_store_be\w+',
                         r'_storebe\w+',
                         r'_Store_HLERelease',
                         r'_StorePointer_HLERelease',
                         r'__stos[bdw]',
                         r'_subborrow\w+',
                         r'__svm_\w+',
                         r'_t1mskc_\w_',
                         r'_tzcnt\w+',
                         r'_writefsbase_\w+',
                         r'_writegsbase_\w+',
                         r'_xabort',
                         r'_xbegin',
                         r'_xend',
                         r'_xgetbv',
                         r'_xrstor\w+',
                         r'_xsave\w+',
                         r'_xsetbv',
                         r'_xtest',
                         r'__builtin_ia32_\w+',
                         r'vec_v\w+',
                         r'_otherarch_intrinsic_\w+']
"""List of non-Arm architecture-specific intrinsics."""
"""List of AVX instructions intrinsics."""
AVX256_INTRINSICS = [r'_mm256(?:[0-9]+)?_\w+']
AVX512_INTRINSICS = [r'_mm512(?:[0-9]+)?_\w+']
